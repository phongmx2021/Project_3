name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  - main

pool: Azure Pipelines

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'phong sub project3'
  projectRoot: $(System.DefaultWorkingDirectory)

stages:
  - stage: Initial
    jobs:
      - job: BuildInfrastructure
        steps:
          - task: TerraformInstaller@0
            displayName: 'Terraform installation'

          - task: TerraformTaskV3@3
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              backendServiceArm: '$(azureServiceConnectionId)'
              backendAzureRmResourceGroupName: 'Project3'
              backendAzureRmStorageAccountName: 'tfstatephongmx'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'test.terraform.tfstate'

          - task: TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: 'azurerm'
              command: 'validate'

          - task: TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              commandOptions: '-lock=false'
              environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

  - stage: Build
    jobs:
      - job: Build
        pool:
          name: Default
        steps:
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: 'Upload Package'
            artifact: drop-fakerestapi
          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
              replaceExistingArchive: true
          - upload: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
            artifact: selenium

  - stage: Deployment
    jobs:
      - deployment: DeployFakeRestAPI
        pool:
          name: Default
        environment: 'TEST'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy Azure Web App'
                  inputs:
                    azureSubscription: '$(azureServiceConnectionId)'
                    appType: 'webApp'
                    appName: 'myApplication-AppService'
                    package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                    deploymentMethod: 'auto'
      - deployment: DeployVirtualMachine
        environment:
          name:  'TEST'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: 'Install Dependencies'
                  inputs:
                    targetType: 'inline'
                    script: |
                      #! /bin/bash

                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install -y chromium-browser
                      pip3 install selenium

                      # download chrome driver
                      FILE=chromedriver_linux64.zip
                      if [ -f "$FILE" ]; then
                        echo "$FILE exists."
                      else
                        wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                      fi
                      # install chrome driver
                      unzip chromedriver_linux64.zip
                      sudo mv chromedriver /usr/bin/chromedriver
                      sudo chown root:root /usr/bin/chromedriver
                      sudo chmod +x /usr/bin/chromedriver
                      chromium-browser -version
                      chromedriver --version
                      # install Log Analytics Agent
                      wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w cbe0ec30-c458-41a4-9b6b-421205cf995e -s CI/JBZBRaayR6cbyEZVvFucqeRXRNVICiKRk1GUczQcAb+kQ+hIReFxRJ2AComJs55gkmkXRrvJEwTKAsmL9gA== -d opinsights.azure.com


  - stage: SeleniumTests
    jobs:
      - deployment: SeleniumTests
        environment:
          name:  'TEST'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  displayName: 'Download Selenium'
                  artifact: selenium
                - task: Bash@3
                  displayName: UI Tests
                  inputs:
                    targetType: 'inline'
                    script: |
                      unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                      sudo mkdir -p /var/logs
                      python3 uitests.py > ui-logs.log
                      cat ui-logs.log
                      sudo mv ui-logs.log /var/logs


  - stage: PostmanTests
    jobs:
      - job: PostmanTests
        steps:
          - task: NodeTool@0
            displayName: Install Node v16.X
            inputs:
              versionSpec: '16.x'
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: 'npm install -g newman'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: CmdLine@2
            displayName: Run Regression Tests
            inputs:
              script: 'newman run automatedtesting/postman/RegressionTestSuite.json -e automatedtesting/postman/RegressionTestSuite.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            continueOnError: true
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            inputs:
              script: 'newman run automatedtesting/postman/DataValidationTestSuite.json -e automatedtesting/postman/DataValidationTestSuite.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/DataValidationTests.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            continueOnError: true
          - task: CmdLine@2
            inputs:
              script: 'ls'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: PublishTestResults@2
            displayName: Publish Test Reports
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'

  - stage: JMeterTests
    jobs:
      - job: JMeterTests
        steps:
          - task: JMeterInstaller@0
            inputs:
              jmeterVersion: '5.2.1'
          - task: Bash@3
            displayName: EnduranceTest
            inputs:
              targetType: 'inline'
              script: 'jmeter -n -t automatedtesting/jmeter/EnduranceTestSuite.jmx -Jresdir=automatedtesting/jmeter/endurancepages.csv -l automatedtesting/jmeter/report/enduranceresults.jtl -e -o automatedtesting/jmeter/endurancereport'
          - task: Bash@3
            displayName: StressTest
            inputs:
              targetType: 'inline'
              script: 'jmeter -n -t automatedtesting/jmeter/StressTestSuite.jmx -Jresdir=automatedtesting/jmeter/stresspages.csv -l automatedtesting/jmeter/report/stressresults.jtl -e -o automatedtesting/jmeter/stressreport'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'automatedtesting/jmeter'
              ArtifactName: 'jmeter'
              publishLocation: 'Container'